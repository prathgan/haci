{"ast":null,"code":"var _jsxFileName = \"/Users/prathamgandhi/Desktop/haci_test/haci/haci-frontend/src/components/CodeEditor.js\",\n  _s = $RefreshSig$();\nimport '../styles/CodeEditor.css';\nimport React, { useRef, useEffect, useState } from 'react';\nimport AceEditor from 'react-ace';\nimport 'ace-builds/src-noconflict/mode-javascript';\nimport 'ace-builds/src-noconflict/theme-monokai';\nimport ace from 'ace-builds/src-noconflict/ace';\nimport { useAppState } from './AppStateContext';\nimport '../styles/CodeEditor.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction CodeEditor({\n  focused,\n  onExecuteCode\n}) {\n  _s();\n  console.log(\"Rendering CodeEditor, focused:\", focused); // Debugging statement\n\n  const {\n    code,\n    setCode\n  } = useAppState();\n  const aceEditorRef = useRef();\n  const markers = useRef({});\n  const [granularity, setGranularity] = useState('token'); // New state for granularity\n  const [isReadingCharacters, setIsReadingCharacters] = useState(false);\n  const controlMotor = async (finger, action) => {\n    try {\n      await fetch('http://localhost:3001/control-motor', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          motor: finger,\n          action\n        })\n      });\n    } catch (error) {\n      console.error('Error sending motor command:', error);\n    }\n  };\n  useEffect(() => {\n    var _aceEditorRef$current;\n    const editor = (_aceEditorRef$current = aceEditorRef.current) === null || _aceEditorRef$current === void 0 ? void 0 : _aceEditorRef$current.editor;\n    //let markers = []; // Array to hold marker IDs\n\n    if (editor) {\n      editor.setReadOnly(!focused);\n    }\n    if (editor && focused) {\n      console.log(\"Setting up Ace Editor\");\n      editor.focus();\n\n      // Disable Ace Editor's default commands (shortcuts)\n      editor.commands.bindKeys({});\n      editor.commands.bindKey(\"Ctrl-j\", null);\n      editor.commands.bindKey(\"Ctrl-k\", null);\n      editor.commands.bindKey(\"Ctrl-l\", null);\n      editor.commands.bindKey(\"Ctrl-g\", null);\n      editor.commands.bindKey(\"Ctrl-b\", null);\n      editor.commands.bindKey(\"Ctrl-v\", null);\n\n      // Mapping of code symbols to their spoken equivalents\n      const symbolMap = {\n        ';': 'semicolon',\n        ',': 'comma',\n        '{': 'open brace',\n        '}': 'close brace',\n        '(': 'open parenthesis',\n        ')': 'close parenthesis',\n        '[': 'open bracket',\n        ']': 'close bracket',\n        '=': 'equals',\n        '==': 'double equals',\n        '===': 'triple equals',\n        '+': 'plus',\n        '-': 'minus',\n        '*': 'asterisk',\n        '/': 'forward slash',\n        '<': 'less than',\n        '>': 'greater than',\n        '!': 'exclamation mark',\n        '!=': 'not equals',\n        '&&': 'and',\n        //'||': 'or',\n        //'/*': 'start block comment',\n        '*/': 'end block comment',\n        '//': 'double slash comment',\n        '%': 'percent',\n        '^': 'caret',\n        '&': 'ampersand',\n        '|': 'pipe',\n        '~': 'tilde',\n        '`': 'backtick',\n        ':': 'colon',\n        '?': 'question mark',\n        '=>': 'arrow function',\n        '+=': 'plus equals',\n        '-=': 'minus equals',\n        '*=': 'times equals',\n        '/=': 'divide equals',\n        '++': 'increment',\n        '--': 'decrement',\n        '<<': 'left shift',\n        '>>': 'right shift',\n        '>>>': 'unsigned right shift',\n        //'===': 'strict equals',\n        '!==': 'strict not equals',\n        '<<=': 'left shift equals',\n        '>>=': 'right shift equals',\n        '>>>=': 'unsigned right shift equals',\n        '&=': 'and equals',\n        '\\'': 'single quote',\n        '\"': 'double quote',\n        '\\\\': 'backslash',\n        '`': 'backtick',\n        '$': 'dollar sign'\n        // Add more symbols as needed\n        // may replace some characters with sounds\n      };\n\n      // Function to convert code line to spoken text\n      // Function to convert code line to spoken text\n      // Function to convert code line to spoken text\n      const codeToSpeech = line => {\n        // Trim the line to remove leading and trailing spaces\n        const trimmedLine = line.trim();\n        console.log(\"trimmedLine: \", trimmedLine);\n\n        // Split the trimmed line by space to process each word/symbol separately\n        const words = trimmedLine.split(' ');\n        console.log(\"words: \", words);\n        const spokenWords = words.map(word => {\n          // Check if the entire word is a symbol and replace it with its spoken equivalent\n          if (symbolMap[word]) {\n            return symbolMap[word];\n          }\n          // If the word contains symbols, replace each symbol within the word\n          let spokenWord = word;\n          Object.entries(symbolMap).forEach(([symbol, replacement]) => {\n            // Use a regex to replace symbols within the word, ensuring they're not part of a larger word\n            const regex = new RegExp(`\\\\${symbol}`, 'g');\n            spokenWord = spokenWord.replace(regex, ` ${replacement} `);\n          });\n          return spokenWord;\n        });\n        console.log(\"spokenWords joined: \", spokenWords.join(' '));\n        return spokenWords.join(' ');\n      };\n\n      // Function to toggle speech granularity\n      const toggleGranularity = () => {\n        console.log(\"toggling granularity\");\n        setGranularity(prevGranularity => prevGranularity === 'token' ? 'character' : 'token');\n      };\n\n      // Add a command for toggling speech granularity\n      editor.commands.addCommand({\n        name: 'toggleGranularity',\n        bindKey: {\n          win: 'Ctrl-B',\n          mac: 'Ctrl-B'\n        },\n        exec: toggleGranularity\n      });\n\n      // Function to read out the text using SpeechSynthesis with pauses between lines\n      const speakText = text => {\n        const lines = text.split('\\n'); // Split the text into lines\n        lines.forEach((line, index) => {\n          let speechText;\n          // Check the currently set granularity\n          console.log(granularity);\n          if (granularity === 'token') {\n            speechText = codeToSpeech(line); // Use codeToSpeech for token granularity\n          } else {\n            line = line.trim();\n            // For character granularity, read each character including spaces\n            speechText = [...line].map(char => symbolMap[char] || char).join(', ');\n          }\n          speechText += index < lines.length - 1 ? \", next line, \" : \"\"; // Add \", next line, \" between lines\n          console.log(speechText);\n          const speech = new SpeechSynthesisUtterance(speechText);\n          window.speechSynthesis.speak(speech);\n        });\n      };\n\n      // Add command to capture Ctrl+G\n      editor.commands.addCommand({\n        name: 'readCurrentLine',\n        bindKey: {\n          win: 'Ctrl-G',\n          mac: 'Command-G'\n        },\n        exec: editor => {\n          const cursorPosition = editor.getCursorPosition();\n          const currentLine = editor.session.getDocument().getLine(cursorPosition.row);\n          speakText(currentLine); // Read out the current line\n        }\n      });\n\n      // Dynamic command to capture Ctrl+Number\n      for (let i = 0; i <= 9; i++) {\n        // Assuming 0-9 for X\n        editor.commands.addCommand({\n          name: `readLast${i}Lines`,\n          bindKey: {\n            win: `Ctrl-${i}`,\n            mac: `Ctrl-${i}`\n          },\n          exec: editor => {\n            const cursorPosition = editor.getCursorPosition();\n            const startRow = Math.max(cursorPosition.row - i + 1, 0); // Ensure startRow is not negative\n            const lines = [];\n            for (let row = startRow; row <= cursorPosition.row; row++) {\n              lines.push(editor.session.getDocument().getLine(row));\n            }\n            speakText(lines.join('\\n')); // Read out the last X lines\n          }\n        });\n      }\n\n      // Ctrl + , = Drop marker 1\n      editor.commands.addCommand({\n        name: 'dropMarker1',\n        bindKey: {\n          win: 'Ctrl-,',\n          mac: 'Ctrl-,'\n        },\n        exec: editor => {\n          markers.current['marker1'] = editor.getCursorPosition();\n          console.log(\"m1 dropped at : \" + editor.getCursorPosition());\n        }\n      });\n\n      // Option + , = Jump to marker 1\n      editor.commands.addCommand({\n        name: 'jumpToMarker1',\n        bindKey: {\n          win: 'Alt-,',\n          mac: 'Option-,'\n        },\n        exec: editor => {\n          const position = markers.current['marker1'];\n          if (position) {\n            editor.moveCursorToPosition(position);\n            console.log(\"going to m1 at : \" + position);\n          }\n        }\n      });\n\n      // Ctrl + . = Drop marker 2\n      editor.commands.addCommand({\n        name: 'dropMarker2',\n        bindKey: {\n          win: 'Ctrl-.',\n          mac: 'Ctrl-.'\n        },\n        exec: editor => {\n          markers.current['marker2'] = editor.getCursorPosition();\n          console.log(\"m2 dropped at : \" + editor.getCursorPosition());\n        }\n      });\n\n      // Option + , = Jump to marker 2\n      editor.commands.addCommand({\n        name: 'jumpToMarker2',\n        bindKey: {\n          win: 'Alt-.',\n          mac: 'Option-.'\n        },\n        exec: editor => {\n          const position = markers.current['marker2'];\n          if (position) {\n            editor.moveCursorToPosition(position);\n            console.log(\"going to m2 at : \" + position);\n          }\n        }\n      });\n\n      // Command + 1: Move to start\n      editor.commands.addCommand({\n        name: 'moveToStart',\n        bindKey: {\n          win: 'Ctrl-1',\n          mac: 'Option-1'\n        },\n        exec: editor => {\n          editor.gotoLine(1, 0, false);\n        }\n      });\n\n      // Command + 2: Move to middle\n      editor.commands.addCommand({\n        name: 'moveToMiddle',\n        bindKey: {\n          win: 'Ctrl-2',\n          mac: 'Option-2'\n        },\n        exec: editor => {\n          const middleLine = Math.floor(editor.session.getLength() / 2);\n          editor.gotoLine(middleLine, 0, false);\n        }\n      });\n\n      // Command + 3: Move to end\n      editor.commands.addCommand({\n        name: 'moveToEnd',\n        bindKey: {\n          win: 'Ctrl-3',\n          mac: 'Option-3'\n        },\n        exec: editor => {\n          const lastLine = editor.session.getLength();\n          editor.gotoLine(lastLine, 0, false);\n        }\n      });\n\n      // Add command to capture Ctrl+G\n      editor.commands.addCommand({\n        name: 'readCurrentLine',\n        bindKey: {\n          win: 'Ctrl-G',\n          mac: 'Ctrl-G'\n        },\n        exec: editor => {\n          console.log(\"speaking current line\");\n          const cursorPosition = editor.getCursorPosition();\n          const currentLine = editor.session.getDocument().getLine(cursorPosition.row);\n          speakText(currentLine); // Read out the current line\n        }\n      });\n\n      // Command to read out the current function name\n      editor.commands.addCommand({\n        name: 'readCurrentFunctionName',\n        bindKey: {\n          win: 'Ctrl-V',\n          mac: 'Ctrl-V'\n        },\n        exec: editor => {\n          console.log(\"speaking current function\");\n          const cursorPosition = editor.getCursorPosition();\n          const codeLines = editor.session.getDocument().getAllLines();\n\n          // Simplified regex to match function declarations\n          const functionRegex = /function\\s+([a-zA-Z0-9_]+)\\s*\\(/;\n          let currentFunctionName = '';\n\n          // Loop through the lines up to the cursor's current line\n          for (let i = 0; i <= cursorPosition.row; i++) {\n            const match = functionRegex.exec(codeLines[i]);\n            if (match) {\n              currentFunctionName = match[1]; // Capture the function name\n            }\n          }\n          if (currentFunctionName) {\n            const speech = new SpeechSynthesisUtterance(`You are in the function ${currentFunctionName}`);\n            window.speechSynthesis.speak(speech);\n          } else {\n            const speech = new SpeechSynthesisUtterance(\"You are not inside a function\");\n            window.speechSynthesis.speak(speech);\n          }\n        }\n      });\n\n      // Function to toggle character reading\n      const toggleCharacterReading = () => {\n        setIsReadingCharacters(!isReadingCharacters);\n      };\n\n      // Command to toggle character reading\n      editor.commands.addCommand({\n        name: 'toggleCharacterReading',\n        bindKey: {\n          win: 'Ctrl-Shift-S',\n          mac: 'Ctrl-Shift-S'\n        },\n        exec: toggleCharacterReading\n      });\n\n      // Add command to execute code with a keyboard shortcut, e.g., Ctrl+Enter\n      editor.commands.addCommand({\n        name: 'executeCode',\n        bindKey: {\n          win: 'Ctrl-Enter',\n          mac: 'Ctrl-Enter'\n        },\n        exec: () => onExecuteCode()\n      });\n      const handleChange = e => {\n        if (isReadingCharacters && e.action === 'insert' && e.lines.length === 1 && e.lines[0].length === 1) {\n          speakCharacter(e.lines[0]);\n        }\n      };\n\n      // Function to speak a character\n      const speakCharacter = char => {\n        const speech = new SpeechSynthesisUtterance(char);\n        window.speechSynthesis.speak(speech);\n      };\n\n      // Add the event listener\n      editor.getSession().on('change', handleChange);\n\n      // Function to get indentation level of a line\n      const getIndentationLevel = line => {\n        const match = line.match(/^\\s*/);\n        return match ? match[0].length : 0;\n      };\n      let previousLineIndentation = 0;\n\n      // Event listener for cursor position change\n      editor.getSession().selection.on('changeCursor', () => {\n        const cursorPosition = editor.getCursorPosition();\n        const currentLine = editor.session.getLine(cursorPosition.row);\n        const currentLineIndentation = getIndentationLevel(currentLine);\n        if (currentLineIndentation > previousLineIndentation) {\n          // Indentation increased, tap fourth finger\n          controlMotor('fourth', 'tap');\n        } else if (currentLineIndentation < previousLineIndentation && cursorPosition.row !== 0) {\n          // Indentation decreased, tap right index finger\n          controlMotor('index', 'tap');\n        }\n        previousLineIndentation = currentLineIndentation;\n      });\n\n      // Cleanup function to remove the event listener\n      return () => {\n        editor.getSession().off('change', handleChange);\n      };\n    }\n  }, [focused, granularity, setGranularity, isReadingCharacters, onExecuteCode]);\n  function handleCodeChange(newCode) {\n    setCode(newCode); // Updates the state with the new code\n  }\n  function moveToLine(lineNumber) {\n    if (aceEditorRef.current) {\n      aceEditorRef.current.editor.gotoLine(lineNumber, 0, true);\n    }\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      flex: 2\n    },\n    children: /*#__PURE__*/_jsxDEV(AceEditor, {\n      ref: aceEditorRef,\n      mode: \"javascript\",\n      theme: \"monokai\",\n      name: \"UNIQUE_ID_OF_DIV\",\n      value: code // Ensure the editor displays the current state\n      ,\n      onChange: handleCodeChange // Set up the onChange handler\n      ,\n      editorProps: {\n        $blockScrolling: true\n      },\n      style: {\n        width: '100%',\n        height: '100%'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 426,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 425,\n    columnNumber: 5\n  }, this);\n}\n_s(CodeEditor, \"M+yo4HzrNhoZEqB5EOfaJ8rICy0=\", false, function () {\n  return [useAppState];\n});\n_c = CodeEditor;\nexport default CodeEditor;\nvar _c;\n$RefreshReg$(_c, \"CodeEditor\");","map":{"version":3,"names":["React","useRef","useEffect","useState","AceEditor","ace","useAppState","jsxDEV","_jsxDEV","CodeEditor","focused","onExecuteCode","_s","console","log","code","setCode","aceEditorRef","markers","granularity","setGranularity","isReadingCharacters","setIsReadingCharacters","controlMotor","finger","action","fetch","method","headers","body","JSON","stringify","motor","error","_aceEditorRef$current","editor","current","setReadOnly","focus","commands","bindKeys","bindKey","symbolMap","codeToSpeech","line","trimmedLine","trim","words","split","spokenWords","map","word","spokenWord","Object","entries","forEach","symbol","replacement","regex","RegExp","replace","join","toggleGranularity","prevGranularity","addCommand","name","win","mac","exec","speakText","text","lines","index","speechText","char","length","speech","SpeechSynthesisUtterance","window","speechSynthesis","speak","cursorPosition","getCursorPosition","currentLine","session","getDocument","getLine","row","i","startRow","Math","max","push","position","moveCursorToPosition","gotoLine","middleLine","floor","getLength","lastLine","codeLines","getAllLines","functionRegex","currentFunctionName","match","toggleCharacterReading","handleChange","e","speakCharacter","getSession","on","getIndentationLevel","previousLineIndentation","selection","currentLineIndentation","off","handleCodeChange","newCode","moveToLine","lineNumber","style","flex","children","ref","mode","theme","value","onChange","editorProps","$blockScrolling","width","height","fileName","_jsxFileName","columnNumber","_c","$RefreshReg$"],"sources":["/Users/prathamgandhi/Desktop/haci_test/haci/haci-frontend/src/components/CodeEditor.js"],"sourcesContent":["import '../styles/CodeEditor.css';\nimport React, { useRef, useEffect, useState } from 'react';\nimport AceEditor from 'react-ace';\nimport 'ace-builds/src-noconflict/mode-javascript';\nimport 'ace-builds/src-noconflict/theme-monokai';\nimport ace from 'ace-builds/src-noconflict/ace';\nimport { useAppState } from './AppStateContext';\nimport '../styles/CodeEditor.css';\n\nfunction CodeEditor({ focused, onExecuteCode }) {\n\n  console.log(\"Rendering CodeEditor, focused:\", focused); // Debugging statement\n\n  const { code, setCode } = useAppState();\n  const aceEditorRef = useRef();\n  const markers = useRef({});\n  const [granularity, setGranularity] = useState('token'); // New state for granularity\n  const [isReadingCharacters, setIsReadingCharacters] = useState(false);\n\n  const controlMotor = async (finger, action) => {\n    try {\n      await fetch('http://localhost:3001/control-motor', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ motor: finger, action }),\n      });\n    } catch (error) {\n      console.error('Error sending motor command:', error);\n    }\n  };\n\n\n  useEffect(() => {\n    const editor = aceEditorRef.current?.editor;\n    //let markers = []; // Array to hold marker IDs\n\n    if (editor) {\n      editor.setReadOnly(!focused);\n    }\n\n    if (editor && focused) {\n\n      console.log(\"Setting up Ace Editor\")\n\n      editor.focus();\n\n      // Disable Ace Editor's default commands (shortcuts)\n      editor.commands.bindKeys({});\n      editor.commands.bindKey(\"Ctrl-j\", null);\n      editor.commands.bindKey(\"Ctrl-k\", null);\n      editor.commands.bindKey(\"Ctrl-l\", null);\n      editor.commands.bindKey(\"Ctrl-g\", null);\n      editor.commands.bindKey(\"Ctrl-b\", null);\n      editor.commands.bindKey(\"Ctrl-v\", null);\n\n      // Mapping of code symbols to their spoken equivalents\n      const symbolMap = {\n        ';': 'semicolon',\n        ',': 'comma',\n        '{': 'open brace',\n        '}': 'close brace',\n        '(': 'open parenthesis',\n        ')': 'close parenthesis',\n        '[': 'open bracket',\n        ']': 'close bracket',\n        '=': 'equals',\n        '==': 'double equals',\n        '===': 'triple equals',\n        '+': 'plus',\n        '-': 'minus',\n        '*': 'asterisk',\n        '/': 'forward slash',\n        '<': 'less than',\n        '>': 'greater than',\n        '!': 'exclamation mark',\n        '!=': 'not equals',\n        '&&': 'and',\n        //'||': 'or',\n        //'/*': 'start block comment',\n        '*/': 'end block comment',\n        '//': 'double slash comment',\n        '%': 'percent',\n        '^': 'caret',\n        '&': 'ampersand',\n        '|': 'pipe',\n        '~': 'tilde',\n        '`': 'backtick',\n        ':': 'colon',\n        '?': 'question mark',\n        '=>': 'arrow function',\n        '+=': 'plus equals',\n        '-=': 'minus equals',\n        '*=': 'times equals',\n        '/=': 'divide equals',\n        '++': 'increment',\n        '--': 'decrement',\n        '<<': 'left shift',\n        '>>': 'right shift',\n        '>>>': 'unsigned right shift',\n        //'===': 'strict equals',\n        '!==': 'strict not equals',\n        '<<=': 'left shift equals',\n        '>>=': 'right shift equals',\n        '>>>=': 'unsigned right shift equals',\n        '&=': 'and equals',\n        '\\'': 'single quote',\n        '\"': 'double quote',\n        '\\\\': 'backslash',\n        '`': 'backtick',\n        '$': 'dollar sign',\n        // Add more symbols as needed\n        // may replace some characters with sounds\n      };\n\n      // Function to convert code line to spoken text\n      // Function to convert code line to spoken text\n      // Function to convert code line to spoken text\n      const codeToSpeech = (line) => {\n        // Trim the line to remove leading and trailing spaces\n        const trimmedLine = line.trim();\n\n        console.log(\"trimmedLine: \", trimmedLine)\n\n        // Split the trimmed line by space to process each word/symbol separately\n        const words = trimmedLine.split(' ');\n\n        console.log(\"words: \", words)\n\n        const spokenWords = words.map(word => {\n          // Check if the entire word is a symbol and replace it with its spoken equivalent\n          if (symbolMap[word]) {\n            return symbolMap[word];\n          }\n          // If the word contains symbols, replace each symbol within the word\n          let spokenWord = word;\n          Object.entries(symbolMap).forEach(([symbol, replacement]) => {\n            // Use a regex to replace symbols within the word, ensuring they're not part of a larger word\n            const regex = new RegExp(`\\\\${symbol}`, 'g');\n            spokenWord = spokenWord.replace(regex, ` ${replacement} `);\n          });\n          return spokenWord;\n        });\n\n        console.log(\"spokenWords joined: \", spokenWords.join(' '))\n\n        return spokenWords.join(' ');\n      };\n\n\n\n      // Function to toggle speech granularity\n      const toggleGranularity = () => {\n        console.log(\"toggling granularity\")\n        setGranularity(prevGranularity => prevGranularity === 'token' ? 'character' : 'token');\n      };\n\n      // Add a command for toggling speech granularity\n      editor.commands.addCommand({\n        name: 'toggleGranularity',\n        bindKey: { win: 'Ctrl-B', mac: 'Ctrl-B' },\n        exec: toggleGranularity\n      });\n\n      // Function to read out the text using SpeechSynthesis with pauses between lines\n      const speakText = (text) => {\n        const lines = text.split('\\n'); // Split the text into lines\n        lines.forEach((line, index) => {\n          let speechText;\n          // Check the currently set granularity\n          console.log(granularity)\n          if (granularity === 'token') {\n            speechText = codeToSpeech(line); // Use codeToSpeech for token granularity\n          } else {\n            line = line.trim();\n            // For character granularity, read each character including spaces\n            speechText = [...line].map(char => symbolMap[char] || char).join(', ');\n          }\n          speechText += (index < lines.length - 1 ? \", next line, \" : \"\"); // Add \", next line, \" between lines\n          console.log(speechText)\n          const speech = new SpeechSynthesisUtterance(speechText);\n          window.speechSynthesis.speak(speech);\n        });\n      };\n\n\n\n\n      // Add command to capture Ctrl+G\n      editor.commands.addCommand({\n        name: 'readCurrentLine',\n        bindKey: { win: 'Ctrl-G', mac: 'Command-G' },\n        exec: (editor) => {\n          const cursorPosition = editor.getCursorPosition();\n          const currentLine = editor.session.getDocument().getLine(cursorPosition.row);\n          speakText(currentLine); // Read out the current line\n        }\n      });\n\n      // Dynamic command to capture Ctrl+Number\n      for (let i = 0; i <= 9; i++) { // Assuming 0-9 for X\n        editor.commands.addCommand({\n          name: `readLast${i}Lines`,\n          bindKey: { win: `Ctrl-${i}`, mac: `Ctrl-${i}` },\n          exec: (editor) => {\n            const cursorPosition = editor.getCursorPosition();\n            const startRow = Math.max(cursorPosition.row - i + 1, 0); // Ensure startRow is not negative\n            const lines = [];\n            for (let row = startRow; row <= cursorPosition.row; row++) {\n              lines.push(editor.session.getDocument().getLine(row));\n            }\n            speakText(lines.join('\\n')); // Read out the last X lines\n          }\n        });\n      }\n\n\n\n\n      // Ctrl + , = Drop marker 1\n      editor.commands.addCommand({\n        name: 'dropMarker1',\n        bindKey: { win: 'Ctrl-,', mac: 'Ctrl-,' },\n        exec: (editor) => {\n          markers.current['marker1'] = editor.getCursorPosition();\n          console.log(\"m1 dropped at : \" + editor.getCursorPosition())\n        }\n      });\n\n      // Option + , = Jump to marker 1\n      editor.commands.addCommand({\n        name: 'jumpToMarker1',\n        bindKey: { win: 'Alt-,', mac: 'Option-,' },\n        exec: (editor) => {\n          const position = markers.current['marker1'];\n          if (position) {\n            editor.moveCursorToPosition(position);\n            console.log(\"going to m1 at : \" + position)\n          }\n        }\n      });\n\n      // Ctrl + . = Drop marker 2\n      editor.commands.addCommand({\n        name: 'dropMarker2',\n        bindKey: { win: 'Ctrl-.', mac: 'Ctrl-.' },\n        exec: (editor) => {\n          markers.current['marker2'] = editor.getCursorPosition();\n          console.log(\"m2 dropped at : \" + editor.getCursorPosition())\n        }\n      });\n\n      // Option + , = Jump to marker 2\n      editor.commands.addCommand({\n        name: 'jumpToMarker2',\n        bindKey: { win: 'Alt-.', mac: 'Option-.' },\n        exec: (editor) => {\n          const position = markers.current['marker2'];\n          if (position) {\n            editor.moveCursorToPosition(position);\n            console.log(\"going to m2 at : \" + position)\n          }\n        }\n      });\n\n      // Command + 1: Move to start\n      editor.commands.addCommand({\n        name: 'moveToStart',\n        bindKey: { win: 'Ctrl-1', mac: 'Option-1' },\n        exec: (editor) => {\n          editor.gotoLine(1, 0, false);\n        }\n      });\n\n      // Command + 2: Move to middle\n      editor.commands.addCommand({\n        name: 'moveToMiddle',\n        bindKey: { win: 'Ctrl-2', mac: 'Option-2' },\n        exec: (editor) => {\n          const middleLine = Math.floor(editor.session.getLength() / 2);\n          editor.gotoLine(middleLine, 0, false);\n        }\n      });\n\n      // Command + 3: Move to end\n      editor.commands.addCommand({\n        name: 'moveToEnd',\n        bindKey: { win: 'Ctrl-3', mac: 'Option-3' },\n        exec: (editor) => {\n          const lastLine = editor.session.getLength();\n          editor.gotoLine(lastLine, 0, false);\n        }\n      });\n\n      // Add command to capture Ctrl+G\n      editor.commands.addCommand({\n        name: 'readCurrentLine',\n        bindKey: { win: 'Ctrl-G', mac: 'Ctrl-G' },\n        exec: (editor) => {\n          console.log(\"speaking current line\")\n          const cursorPosition = editor.getCursorPosition();\n          const currentLine = editor.session.getDocument().getLine(cursorPosition.row);\n          speakText(currentLine); // Read out the current line\n        }\n      });\n\n      // Command to read out the current function name\n      editor.commands.addCommand({\n        name: 'readCurrentFunctionName',\n        bindKey: { win: 'Ctrl-V', mac: 'Ctrl-V' },\n        exec: (editor) => {\n          console.log(\"speaking current function\")\n          const cursorPosition = editor.getCursorPosition();\n          const codeLines = editor.session.getDocument().getAllLines();\n\n          // Simplified regex to match function declarations\n          const functionRegex = /function\\s+([a-zA-Z0-9_]+)\\s*\\(/;\n          let currentFunctionName = '';\n\n          // Loop through the lines up to the cursor's current line\n          for (let i = 0; i <= cursorPosition.row; i++) {\n            const match = functionRegex.exec(codeLines[i]);\n            if (match) {\n              currentFunctionName = match[1]; // Capture the function name\n            }\n          }\n\n          if (currentFunctionName) {\n            const speech = new SpeechSynthesisUtterance(`You are in the function ${currentFunctionName}`);\n            window.speechSynthesis.speak(speech);\n          } else {\n            const speech = new SpeechSynthesisUtterance(\"You are not inside a function\");\n            window.speechSynthesis.speak(speech);\n          }\n        }\n      });\n\n\n\n      // Function to toggle character reading\n      const toggleCharacterReading = () => {\n        setIsReadingCharacters(!isReadingCharacters);\n      };\n\n      // Command to toggle character reading\n      editor.commands.addCommand({\n        name: 'toggleCharacterReading',\n        bindKey: { win: 'Ctrl-Shift-S', mac: 'Ctrl-Shift-S' },\n        exec: toggleCharacterReading\n      });\n\n      // Add command to execute code with a keyboard shortcut, e.g., Ctrl+Enter\n      editor.commands.addCommand({\n        name: 'executeCode',\n        bindKey: { win: 'Ctrl-Enter', mac: 'Ctrl-Enter' },\n        exec: () => onExecuteCode(),\n      });\n\n\n\n\n\n      const handleChange = (e) => {\n        if (isReadingCharacters && e.action === 'insert' && e.lines.length === 1 && e.lines[0].length === 1) {\n          speakCharacter(e.lines[0]);\n        }\n      };\n\n      // Function to speak a character\n      const speakCharacter = (char) => {\n        const speech = new SpeechSynthesisUtterance(char);\n        window.speechSynthesis.speak(speech);\n      };\n\n      // Add the event listener\n      editor.getSession().on('change', handleChange);\n\n      // Function to get indentation level of a line\n      const getIndentationLevel = (line) => {\n        const match = line.match(/^\\s*/);\n        return match ? match[0].length : 0;\n      };\n\n      let previousLineIndentation = 0;\n\n      // Event listener for cursor position change\n      editor.getSession().selection.on('changeCursor', () => {\n        const cursorPosition = editor.getCursorPosition();\n        const currentLine = editor.session.getLine(cursorPosition.row);\n        const currentLineIndentation = getIndentationLevel(currentLine);\n\n        if (currentLineIndentation > previousLineIndentation) {\n          // Indentation increased, tap fourth finger\n          controlMotor('fourth', 'tap');\n        } else if (currentLineIndentation < previousLineIndentation && cursorPosition.row !== 0) {\n          // Indentation decreased, tap right index finger\n          controlMotor('index', 'tap');\n        }\n\n        previousLineIndentation = currentLineIndentation;\n      });\n\n      // Cleanup function to remove the event listener\n      return () => {\n        editor.getSession().off('change', handleChange);\n      };\n\n    }\n  }, [focused, granularity, setGranularity, isReadingCharacters, onExecuteCode]);\n\n\n  function handleCodeChange(newCode) {\n    setCode(newCode); // Updates the state with the new code\n  }\n\n  function moveToLine(lineNumber) {\n    if (aceEditorRef.current) {\n      aceEditorRef.current.editor.gotoLine(lineNumber, 0, true);\n    }\n  }\n\n\n\n\n  return (\n    <div style={{ flex: 2 }}>\n      <AceEditor\n        ref={aceEditorRef}\n        mode=\"javascript\"\n        theme=\"monokai\"\n        name=\"UNIQUE_ID_OF_DIV\"\n        value={code} // Ensure the editor displays the current state\n        onChange={handleCodeChange} // Set up the onChange handler\n        editorProps={{ $blockScrolling: true }}\n        style={{ width: '100%', height: '100%' }}\n      />\n    </div>\n  );\n}\n\nexport default CodeEditor;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}