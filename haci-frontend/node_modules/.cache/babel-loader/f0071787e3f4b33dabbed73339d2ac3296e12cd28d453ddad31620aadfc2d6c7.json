{"ast":null,"code":"var _jsxFileName = \"/Users/prathamgandhi/Desktop/Bx Thesis/proto/haci-frontend/src/App.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { useState, useEffect } from 'react'; // Import useState and useEffect\nimport { AppStateProvider, useAppState } from './components/AppStateContext';\nimport CodeEditor from './components/CodeEditor';\nimport ErrorsPanel from './components/ErrorsPanel';\nimport ConsolePanel from './components/ConsolePanel';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [activePanel, setActivePanel] = useState('code'); // New state to track the active panel\n\n  useEffect(() => {\n    const handleKeyDown = event => {\n      if (event.metaKey || event.ctrlKey) {\n        // metaKey for Mac, ctrlKey for Windows/Linux\n        switch (event.key.toLowerCase()) {\n          // Use toLowerCase() to ensure case-insensitivity\n          case 'i':\n            setActivePanel('errors');\n            break;\n          case 'j':\n            setActivePanel('code');\n            break;\n          case 'k':\n            setActivePanel('console');\n            break;\n          default:\n            break;\n        }\n      }\n    };\n    window.addEventListener('keydown', handleKeyDown);\n\n    // Cleanup the event listener\n    return () => {\n      window.removeEventListener('keydown', handleKeyDown);\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(AppStateProvider, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"toolbar\",\n      children: [/*#__PURE__*/_jsxDEV(RunCodeButton, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 9\n      }, this), \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"app-container\",\n      children: [activePanel === 'code' && /*#__PURE__*/_jsxDEV(CodeEditor, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 36\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"side-panels\",\n        children: [activePanel === 'errors' && /*#__PURE__*/_jsxDEV(ErrorsPanel, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 40\n        }, this), activePanel === 'console' && /*#__PURE__*/_jsxDEV(ConsolePanel, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 41\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 5\n  }, this);\n}\n\n// Separate component for the button to use the useAppState hook correctly\n_s(App, \"7BxqNKMMiPl/4LQpboTsedUakPY=\");\n_c = App;\nfunction RunCodeButton() {\n  _s2();\n  const {\n    code,\n    setConsoleOutput,\n    setErrors\n  } = useAppState();\n\n  // In RunCodeButton component\n  function executeCode() {\n    let consoleOutput = `Run at: ${new Date().toLocaleTimeString()}\\n`;\n\n    // Clear errors at the start of each execution attempt\n    setErrors([]);\n    const originalConsoleLog = console.log;\n    console.log = (...args) => {\n      const message = \">> \" + args.join(' ') + '\\n';\n      consoleOutput += message;\n      originalConsoleLog(...args);\n    };\n    try {\n      const execute = new Function('console', code);\n      execute({\n        log: console.log\n      });\n      // If execution is successful, errors state is already cleared\n    } catch (error) {\n      const lineMatch = error.stack.match(/<anonymous>:(\\d+):\\d+/);\n      const lineNumber = lineMatch ? lineMatch[1] : \"unknown\";\n      // Update the errors state with the new error\n      setErrors([`Line ${lineNumber - 2}: ${error.message}`]);\n      consoleOutput += `Line ${lineNumber - 2}: ${error.message}\\n`;\n    }\n    setConsoleOutput(consoleOutput);\n    console.log = originalConsoleLog;\n  }\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    onClick: executeCode,\n    children: \"Run Code\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 96,\n    columnNumber: 10\n  }, this);\n}\n_s2(RunCodeButton, \"nxNYymzMQMdpt8M30vlYBvVpqnI=\", false, function () {\n  return [useAppState];\n});\n_c2 = RunCodeButton;\nexport default App;\n\n/**\nfunction testFunction() {\n  console.log('Hello, World!');\n  let sum = 0;\n  for (let i = 0; i < 10; i++) {\n    sum += i;\n  }\n  console.log('Sum:', sum);\n\n  // Drop and jump to markers\n  // Ctrl + , to drop marker 1\n  // Option + , to jump to marker 1\n  // Ctrl + . to drop marker 2\n  // Option + . to jump to marker 2\n}\n\ntestFunction();\n */\nvar _c, _c2;\n$RefreshReg$(_c, \"App\");\n$RefreshReg$(_c2, \"RunCodeButton\");","map":{"version":3,"names":["React","useState","useEffect","AppStateProvider","useAppState","CodeEditor","ErrorsPanel","ConsolePanel","jsxDEV","_jsxDEV","App","_s","activePanel","setActivePanel","handleKeyDown","event","metaKey","ctrlKey","key","toLowerCase","window","addEventListener","removeEventListener","children","className","RunCodeButton","fileName","_jsxFileName","lineNumber","columnNumber","_c","_s2","code","setConsoleOutput","setErrors","executeCode","consoleOutput","Date","toLocaleTimeString","originalConsoleLog","console","log","args","message","join","execute","Function","error","lineMatch","stack","match","onClick","_c2","$RefreshReg$"],"sources":["/Users/prathamgandhi/Desktop/Bx Thesis/proto/haci-frontend/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react'; // Import useState and useEffect\nimport { AppStateProvider, useAppState } from './components/AppStateContext';\nimport CodeEditor from './components/CodeEditor';\nimport ErrorsPanel from './components/ErrorsPanel';\nimport ConsolePanel from './components/ConsolePanel';\n\nimport './App.css';\n\nfunction App() {\n  const [activePanel, setActivePanel] = useState('code'); // New state to track the active panel\n\n  useEffect(() => {\n    const handleKeyDown = (event) => {\n      if (event.metaKey || event.ctrlKey) { // metaKey for Mac, ctrlKey for Windows/Linux\n        switch (event.key.toLowerCase()) { // Use toLowerCase() to ensure case-insensitivity\n          case 'i':\n            setActivePanel('errors');\n            break;\n          case 'j':\n            setActivePanel('code');\n            break;\n          case 'k':\n            setActivePanel('console');\n            break;\n          default:\n            break;\n        }\n      }\n    };\n\n    window.addEventListener('keydown', handleKeyDown);\n\n    // Cleanup the event listener\n    return () => {\n      window.removeEventListener('keydown', handleKeyDown);\n    };\n  }, []);\n\n  return (\n    <AppStateProvider>\n      <div className=\"toolbar\">\n        <RunCodeButton /> {/* This button is now part of the toolbar */}\n      </div>\n      <div className=\"app-container\">\n        {activePanel === 'code' && <CodeEditor />}\n        <div className=\"side-panels\">\n          {activePanel === 'errors' && <ErrorsPanel />}\n          {activePanel === 'console' && <ConsolePanel />}\n        </div>\n      </div>\n    </AppStateProvider>\n  );\n}\n\n\n// Separate component for the button to use the useAppState hook correctly\nfunction RunCodeButton() {\n\n  const { code, setConsoleOutput, setErrors } = useAppState();\n\n  // In RunCodeButton component\n  function executeCode() {\n    let consoleOutput = `Run at: ${new Date().toLocaleTimeString()}\\n`;\n\n    // Clear errors at the start of each execution attempt\n    setErrors([]);\n\n    const originalConsoleLog = console.log;\n    console.log = (...args) => {\n      const message = \">> \" + args.join(' ') + '\\n';\n      consoleOutput += message;\n      originalConsoleLog(...args);\n    };\n\n    try {\n      const execute = new Function('console', code);\n      execute({ log: console.log });\n      // If execution is successful, errors state is already cleared\n    } catch (error) {\n      const lineMatch = error.stack.match(/<anonymous>:(\\d+):\\d+/);\n      const lineNumber = lineMatch ? lineMatch[1] : \"unknown\";\n      // Update the errors state with the new error\n      setErrors([`Line ${lineNumber - 2}: ${error.message}`]);\n      consoleOutput += `Line ${lineNumber - 2}: ${error.message}\\n`;\n    }\n\n    setConsoleOutput(consoleOutput);\n    console.log = originalConsoleLog;\n  }\n\n  \n\n\n\n\n  return <button onClick={executeCode}>Run Code</button>;\n}\n\n\nexport default App;\n\n/**\nfunction testFunction() {\n  console.log('Hello, World!');\n  let sum = 0;\n  for (let i = 0; i < 10; i++) {\n    sum += i;\n  }\n  console.log('Sum:', sum);\n\n  // Drop and jump to markers\n  // Ctrl + , to drop marker 1\n  // Option + , to jump to marker 1\n  // Ctrl + . to drop marker 2\n  // Option + . to jump to marker 2\n}\n\ntestFunction();\n */\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}