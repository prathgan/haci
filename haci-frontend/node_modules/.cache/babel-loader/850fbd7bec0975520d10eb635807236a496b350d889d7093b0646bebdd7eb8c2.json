{"ast":null,"code":"var _jsxFileName = \"/Users/prathamgandhi/Desktop/haci_test/haci/haci-frontend/src/App.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { AppStateProvider, useAppState } from './components/AppStateContext';\nimport CodeEditor from './components/CodeEditor';\nimport ErrorsPanel from './components/ErrorsPanel';\nimport ConsolePanel from './components/ConsolePanel';\n\n//testing new git commit\n\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [focusedPanel, setFocusedPanel] = useState('code'); // State to track the focused panel\n\n  useEffect(() => {\n    const handleKeyDown = event => {\n      if (event.metaKey || event.ctrlKey) {\n        switch (event.key.toLowerCase()) {\n          case 'i':\n            setFocusedPanel('errors');\n            break;\n          case 'j':\n            setFocusedPanel('code');\n            break;\n          case 'k':\n            setFocusedPanel('console');\n            break;\n          default:\n            break;\n        }\n      }\n    };\n    window.addEventListener('keydown', handleKeyDown);\n    return () => {\n      window.removeEventListener('keydown', handleKeyDown);\n    };\n  }, []);\n\n  // Helper function to apply focused class\n  const getPanelClass = panelName => {\n    return focusedPanel === panelName ? 'focused-panel' : '';\n  };\n  return /*#__PURE__*/_jsxDEV(AppStateProvider, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"toolbar\",\n      children: [/*#__PURE__*/_jsxDEV(RunCodeButton, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this), \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"app-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: `panel ${focusedPanel === 'code' ? 'focused-panel' : ''}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(CodeEditor, {\n        focused: focusedPanel === 'code'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"side-panels\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: `panel ${focusedPanel === 'errors' ? 'focused-panel' : ''}`,\n          children: /*#__PURE__*/_jsxDEV(ErrorsPanel, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 60,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `panel ${focusedPanel === 'console' ? 'focused-panel' : ''}`,\n          children: /*#__PURE__*/_jsxDEV(ConsolePanel, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 63,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 5\n  }, this);\n}\n\n// Separate component for the button to use the useAppState hook correctly\n_s(App, \"q9sLS0RGgk2qoylTz5wKfxuKJLk=\");\n_c = App;\nfunction RunCodeButton() {\n  _s2();\n  const {\n    code,\n    setConsoleOutput,\n    setErrors\n  } = useAppState();\n\n  // In RunCodeButton component\n  function executeCode() {\n    console.log(\"going to send message\");\n    // Example of sending a command from the React app\n    const controlMotor = async (motor, action) => {\n      try {\n        const response = await fetch('http://localhost:3001/control-motor', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            motor,\n            action\n          })\n        });\n        if (response.ok) {\n          console.log('Motor command sent successfully');\n        } else {\n          console.error('Failed to send motor command');\n        }\n      } catch (error) {\n        console.error('Error sending motor command:', error);\n      }\n    };\n    let consoleOutput = `Run at: ${new Date().toLocaleTimeString()}\\n`;\n\n    // Clear errors at the start of each execution attempt\n    setErrors([]);\n    const originalConsoleLog = console.log;\n    console.log = (...args) => {\n      const message = \">> \" + args.join(' ') + '\\n';\n      consoleOutput += message;\n      originalConsoleLog(...args);\n    };\n    try {\n      const execute = new Function('console', code);\n      execute({\n        log: console.log\n      });\n      // If execution is successful, errors state is already cleared\n    } catch (error) {\n      const lineMatch = error.stack.match(/<anonymous>:(\\d+):\\d+/);\n      const lineNumber = lineMatch ? lineMatch[1] : \"unknown\";\n      // Update the errors state with the new error\n      setErrors([`Line ${lineNumber - 2}: ${error.message}`]);\n      consoleOutput += `Line ${lineNumber - 2}: ${error.message}\\n`;\n    }\n    setConsoleOutput(consoleOutput);\n    console.log = originalConsoleLog;\n  }\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    onClick: executeCode,\n    children: \"Run Code\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 136,\n    columnNumber: 10\n  }, this);\n}\n_s2(RunCodeButton, \"nxNYymzMQMdpt8M30vlYBvVpqnI=\", false, function () {\n  return [useAppState];\n});\n_c2 = RunCodeButton;\nexport default App;\n\n/**\nfunction testFunction() {\n  console.log('Hello, World!');\n  let sum = 0;\n  for (let i = 0; i < 10; i++) {\n    sum += i;\n  }\n  console.log('Sum:', sum);\n\n  // Drop and jump to markers\n  // Ctrl + , to drop marker 1\n  // Option + , to jump to marker 1\n  // Ctrl + . to drop marker 2\n  // Option + . to jump to marker 2\n}\n\ntestFunction();\n */\nvar _c, _c2;\n$RefreshReg$(_c, \"App\");\n$RefreshReg$(_c2, \"RunCodeButton\");","map":{"version":3,"names":["React","useState","useEffect","AppStateProvider","useAppState","CodeEditor","ErrorsPanel","ConsolePanel","jsxDEV","_jsxDEV","App","_s","focusedPanel","setFocusedPanel","handleKeyDown","event","metaKey","ctrlKey","key","toLowerCase","window","addEventListener","removeEventListener","getPanelClass","panelName","children","className","RunCodeButton","fileName","_jsxFileName","lineNumber","columnNumber","focused","_c","_s2","code","setConsoleOutput","setErrors","executeCode","console","log","controlMotor","motor","action","response","fetch","method","headers","body","JSON","stringify","ok","error","consoleOutput","Date","toLocaleTimeString","originalConsoleLog","args","message","join","execute","Function","lineMatch","stack","match","onClick","_c2","$RefreshReg$"],"sources":["/Users/prathamgandhi/Desktop/haci_test/haci/haci-frontend/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { AppStateProvider, useAppState } from './components/AppStateContext';\nimport CodeEditor from './components/CodeEditor';\nimport ErrorsPanel from './components/ErrorsPanel';\nimport ConsolePanel from './components/ConsolePanel';\n\n//testing new git commit\n\nimport './App.css';\n\nfunction App() {\n\n  const [focusedPanel, setFocusedPanel] = useState('code'); // State to track the focused panel\n\n  useEffect(() => {\n    const handleKeyDown = (event) => {\n      if (event.metaKey || event.ctrlKey) {\n        switch (event.key.toLowerCase()) {\n          case 'i':\n            setFocusedPanel('errors');\n            break;\n          case 'j':\n            setFocusedPanel('code');\n            break;\n          case 'k':\n            setFocusedPanel('console');\n            break;\n          default:\n            break;\n        }\n      }\n    };\n\n    window.addEventListener('keydown', handleKeyDown);\n\n    return () => {\n      window.removeEventListener('keydown', handleKeyDown);\n    };\n  }, []);\n\n  // Helper function to apply focused class\n  const getPanelClass = (panelName) => {\n    return focusedPanel === panelName ? 'focused-panel' : '';\n  };\n\n  return (\n    <AppStateProvider>\n      <div className=\"toolbar\">\n        <RunCodeButton /> {/* Assuming RunCodeButton is defined elsewhere */}\n      </div>\n      <div className=\"app-container\">\n        <div className={`panel ${focusedPanel === 'code' ? 'focused-panel' : ''}`}></div>\n\n        <CodeEditor focused={focusedPanel === 'code'} />\n\n        {/* <CodeEditor focused={focusedPanel === 'code'} /> */}\n\n        <div className='side-panels'>\n          <div className={`panel ${focusedPanel === 'errors' ? 'focused-panel' : ''}`}>\n            <ErrorsPanel />\n          </div>\n          <div className={`panel ${focusedPanel === 'console' ? 'focused-panel' : ''}`}>\n            <ConsolePanel />\n          </div>\n        </div>\n      </div>\n    </AppStateProvider>\n  );\n}\n\n\n// Separate component for the button to use the useAppState hook correctly\nfunction RunCodeButton() {\n\n  const { code, setConsoleOutput, setErrors } = useAppState();\n\n  // In RunCodeButton component\n  function executeCode() {\n    console.log(\"going to send message\")\n    // Example of sending a command from the React app\n    const controlMotor = async (motor, action) => {\n      try {\n        const response = await fetch('http://localhost:3001/control-motor', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify({ motor, action }),\n        });\n\n        if (response.ok) {\n          console.log('Motor command sent successfully');\n        } else {\n          console.error('Failed to send motor command');\n        }\n      } catch (error) {\n        console.error('Error sending motor command:', error);\n      }\n    };\n\n\n\n    let consoleOutput = `Run at: ${new Date().toLocaleTimeString()}\\n`;\n\n    // Clear errors at the start of each execution attempt\n    setErrors([]);\n\n    const originalConsoleLog = console.log;\n    console.log = (...args) => {\n      const message = \">> \" + args.join(' ') + '\\n';\n      consoleOutput += message;\n      originalConsoleLog(...args);\n    };\n\n    try {\n      const execute = new Function('console', code);\n      execute({ log: console.log });\n      // If execution is successful, errors state is already cleared\n    } catch (error) {\n      const lineMatch = error.stack.match(/<anonymous>:(\\d+):\\d+/);\n      const lineNumber = lineMatch ? lineMatch[1] : \"unknown\";\n      // Update the errors state with the new error\n      setErrors([`Line ${lineNumber - 2}: ${error.message}`]);\n      consoleOutput += `Line ${lineNumber - 2}: ${error.message}\\n`;\n    }\n\n    setConsoleOutput(consoleOutput);\n    console.log = originalConsoleLog;\n  }\n\n\n\n\n\n\n  return <button onClick={executeCode}>Run Code</button>;\n}\n\n\nexport default App;\n\n/**\nfunction testFunction() {\n  console.log('Hello, World!');\n  let sum = 0;\n  for (let i = 0; i < 10; i++) {\n    sum += i;\n  }\n  console.log('Sum:', sum);\n\n  // Drop and jump to markers\n  // Ctrl + , to drop marker 1\n  // Option + , to jump to marker 1\n  // Ctrl + . to drop marker 2\n  // Option + . to jump to marker 2\n}\n\ntestFunction();\n */"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}